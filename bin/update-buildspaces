#! /bin/bash

function versioninfo
{
    echo "$(basename "${0}") - version 1.0.0"
    echo -e "\nCopyright (C) 2010-2019 Hacking Networked Solutions"
    echo "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>."
    echo "This is free software: you are free to change and redistribute it."
    echo "There is NO WARRANTY, to the extent permitted by law."
}

function helpscreen
{
	echo "Usage: ${CMDNAME} [OPTION]... BS [BS]..."
	echo "Automatically updates specified build-space(s) or those listed in"
	echo "${CFGFILE} if BS is all"
	echo
	echo "  -b, --quiet-build              pass the --quiet-build flag to emerge"
	echo "                                 to suppress most build output" 
	echo "  -f, --force                    always update the build-space(s) regardless"
	echo "                                 of the current buid-space state"
	echo "  -k, --keep-going               pass the --keep-going flag to emerge to"
	echo "                                 cause emerge not to stop if a build error"
	echo "                                 is encountered" 
	echo "  -p, --pretend                  do not perform any actions simply list the"
	echo "                                 build-space(s) which would be updated"
	echo "  -r, --remerge-all              remerge all installed packages instead"
	echo "                                 of performing an update"
	echo "      --help                     display this help and exit"
    echo "      --version                  output version information and exit"
}

function die
{
    local msg ev
    msg="ERROR: ${1}"
    ev="${2}"
    
    if [[ -z "${ev}" ]] || (( ev < 1 )); then
        ev=1
    fi
    
    echo "${msg}" >&2
    exit "${ev}"
}

# Init global vars
BUILDSPACESXX=""
BUILDSPACES32=""
CFGFILE="${CFGFILE:-/etc/buildspaces}"
CMDNAME="$(basename "${0}")"
EXITSTATUS=0
UPDATE_FLAGS=""

# If we can read the config file do so
# shellcheck disable=SC1090
[[ -r "${CFGFILE}" ]] && source "${CFGFILE}"

# Process command line switches
while (( $# > 0 ))
do
	case $1 in
		-b|--quiet-build)
			UPDATE_FLAGS="${UPDATE_FLAGS} --quiet-build"
		;;			
	    -f|--force)
			FORCE=1
	    ;;
	    -k|--keep-going)
	    	UPDATE_FLAGS="${UPDATE_FLAGS} --keep-going"
	    ;;
	    -p|--pretend)
			PRETEND=1
	    ;;
		-r|--remerge-all)
	    	UPDATE_FLAGS="${UPDATE_FLAGS} --remerge-all"
	    ;;
			
		--version)
			versioninfo
			exit
		;;	
		-*)
			helpscreen
			exit
		;;
		
		*)
			# Add this build-space to the list of build-spaces
			[[ -z "${BUILDSPACES}" ]] && BUILDSPACES="$1" || BUILDSPACES="${BUILDSPACES} $1"
		;;
	esac
	shift 1
done

# If we can't read the config file complain and quit
[[ -r "${CFGFILE}" ]] && die "Unable to read config file at ${CFGFILE}" 1 

# Check configuration
[[ -z "${REPOSROOT}" ]] && die "No REPOSROOT set in ${CFGFILE}" 2
[[ -z "${BUILDSPACEROOT}" ]] && die "No BUILDSPACEROOT set in ${CFGFILE}" 2
[[ -z "${BUILDSPACESXX}" && -z "${BUILDSPACES32}" ]] && die "No BUILDSPACESXX or BUILDSPACES32 set in ${CFGFILE}" 2

# If we have been asked to update all build-spaces make a list
[[ ${BUILDSPACES} = "all" ]] && BUILDSPACES="${BUILDSPACESXX} ${BUILDSPACES32}"

# Loop through the build-spaces...
for BUILDSPACE in ${BUILDSPACES}; do
	# Check that this appears to be a build-space
	[[ ! " ${BUILDSPACESXX} " =~ [[:blank:]]${BUILDSPACE}[[:blank:]] && \
	   ! " ${BUILDSPACES32} " =~ [[:blank:]]${BUILDSPACE}[[:blank:]] ]] \
		&& die "${BUILDSPACE} does not appear in BUILDSPACESXX or BUILDSPACES32" 2
	[[ -d "${BUILDSPACEROOT}/${BUILDSPACE}" ]] || die "No build-space at ${BUILDSPACEROOT}/${BUILDSPACE}" 2

	# If the build-space is on the same architecture as the host run update-buildspace
	# otherwise run linux32 update-buildspace
	if [[ " ${BUILDSPACESXX} " =~ [[:blank:]]${BUILDSPACE}[[:blank:]] ]]; then
		# If the build-space has already been successfully updated since the last sync
		# and the --force flag has not been used then display a warning and skip it.
		if [[ -f "${REPOSROOT}/testing/${BUILDSPACE}/updated" && -z "${FORCE}" ]]; then
			echo "Skipping the [native] ${BUILDSPACE} build-space...already updated."
		else
			echo -n "Updating the [native] ${BUILDSPACE} build-space..."
			if [[ -z "${PRETEND}" ]]; then
                # We want ${UPDATE_FLAGS} to split
                # shellcheck disable=SC2086
				if chroot "${BUILDSPACEROOT}/${BUILDSPACE}" /usr/bin/update-buildspace --quiet ${UPDATE_FLAGS}; then
					echo "ok." 
					# Set the updated "flag"
					touch "${REPOSROOT}/testing/${BUILDSPACE}/updated"
				else
					echo "failed."
					EXITSTATUS=3
				fi
			else
				echo "pretend."
			fi
		fi 
	else
		# If the build-space has already been successfully updated since the last sync
		# and the --force flag has not been used then display a warning and skip it.
		if [[ -f "${REPOSROOT}/testing/${BUILDSPACE}/updated" && -z "${FORCE}" ]]; then
			echo "Skipping the [32-bit] ${BUILDSPACE} build-space...already updated."
		else
			echo -n "Updating the [32-bit] ${BUILDSPACE} build-space..."
			if [[ -z "${PRETEND}" ]]; then
			    # We want ${UPDATE_FLAGS} to split
			    # shellcheck disable=SC2086
				if linux32 chroot "${BUILDSPACEROOT}/${BUILDSPACE}" /usr/bin/update-buildspace --quiet ${UPDATE_FLAGS}; then
					echo "ok." 
					# Set the updated "flag"
					touch "${REPOSROOT}/testing/${BUILDSPACE}/updated"
				else
					echo "failed."
					EXITSTATUS=3
				fi
			else
				echo "pretend."
			fi
		fi 
	fi
done

exit ${EXITSTATUS}	