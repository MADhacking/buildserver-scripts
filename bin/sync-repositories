#! /bin/bash

function versioninfo
{
	VERSION="$Revision$"
	VERSION="${VERSION%\ \$}"; VERSION="${VERSION#\:}"; VERSION="${VERSION##\ }"
	VERSION="(CVS revision $VERSION)"
	
	NAME="$Name$"
	NAME="${NAME%\ \$}"; NAME="${NAME#\:}"; NAME="${NAME##\ }"; NAME="${NAME##release-}"; NAME="${NAME//-/.}"
	[[ -n $NAME ]] && NAME="Version $NAME "

	echo ${CMDNAME}
	echo ${NAME}${VERSION}

	echo -e "\nCopyright (C) 2010 Hacking Networked Solutions"
	echo "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>."
	echo "This is free software: you are free to change and redistribute it."
	echo "There is NO WARRANTY, to the extent permitted by law."
}

function helpscreen
{
	echo "Usage: ${CMDNAME} [OPTION]..."
	echo "Synchronises \"live\", testing or stable repositories ensuring that overlays,"
	echo "portage trees, packages and kernels are synchronised simultaneously."
	echo
	echo "  -e, --send-email               send an email of the synchronisation logs to the"
	echo "                                 email address specified in ${CFGFILE}"
	echo "  -k, --keep-going               continue performing tasks even if a previous"
	echo "                                 task fails to complete correctly."
	echo "  -l, --sync-live                synchronise the \"live\" portage repository"
	echo "                                 with the remote Gentoo portage repository"
	echo "  -n, --no-auto                  do not perform any automatic actions regardless"
	echo "                                 of AUTOxxx settings in ${CFGFILE}"
	echo "  -q, --quiet                    do not produce any output during the"
	echo "                                 update process (implies --send-email)"
	echo "                                 (implied if not being run from a TTY)"
	echo "  -t BS [BS]...,                 synchronise the testing portage repository"
	echo "  --sync-test BS [BS]...         for the BS build-space(s) with the \"live\""
	echo "                                 portage repository, or all can be specified"
	echo "  -r BS [BS]...,                 run rebuild-portage-caches in the testing"
	echo "  --rebuild-caches BS [BS]...    repository for the BS build-space(s), or all"
	echo "                                 can be specified"
	echo "  -s BS [BS]...,                 synchronise the stable configuration, portage,"
	echo "  --sync-stable BS [BS]...       kernel and package repository for the BS"
	echo "                                 build-space(s) with the testing repository"
	echo "  -f, --force                    force synchronisation between testing and stable"
	echo "                                 repositories even when update-buildspace has"
	echo "                                 not been run since the last --sync-test"
	echo "      --help                     display this help and exit"
    echo "      --version                  output version information and exit"
}

function finish_up
{
	# Bzip any log files larger than 100k
	bzip_large_logs 102400
	
	# If we were asked to send email send the logs to root
	if [[ -n ${SENDEMAIL} ]]; then
		send_logs_by_email "Synchronising repositories" "${ADMIN_EMAIL:-root}"
	fi
	
	# If we aren't running in quiet mode show a list of the log files we generated during the update
	if [[ -z ${QUIET} ]]; then
		echo
		display_log_paths
	fi
	
	exit ${EXITSTATUS}
}

function okorfail
{
	if (( ! $? )); then
		echo "ok." 
	else
		echo "failed [$?]."
		EXITSTATUS=$1
	fi
}

# Init global vars
OUTLOGLIB=/usr/lib/outlogger.sh
CFGFILE=/etc/buildspaces
CMDNAME=$(basename ${0})
EXITSTATUS=0

# If the config file exists and we can read it do so.
[[ -r ${CFGFILE} ]] && source ${CFGFILE}

# Process command line switches
while (( $# > 0 ))
do
	case $1 in
	    -e|--send-email)
			SENDEMAIL=1
			shift 1
	    ;;
	    -k|--keep-going)
			KEEPGOING=1
			shift 1
	    ;;
	    -l|--sync-live)
			LIVEREPO=1
			shift 1
	    ;;
	    -n|--no-auto)
	    	unset AUTOLAYMANSYNC AUTOREBUILD 
			shift 1
	    ;;
	    -q|--quiet)
			QUIET=1
			SENDEMAIL=1
			shift 1
	    ;;
	    -t|--sync-test)
	    	TESTREPO=1
			shift 1
			while [[ (( $# > 0 )) && ${1::1} != "-" ]]
			do
				[[ -z ${TESTREPOS} ]] && TESTREPOS=$1 || TESTREPOS="${TESTREPOS} $1"
				shift 1
			done
		;;
	    -r|--rebuild-caches)
	    	REBUILDCACHE=1
			shift 1
			while [[ (( $# > 0 )) && ${1::1} != "-" ]]
			do
				[[ -z ${REBUILDREPOS} ]] && REBUILDREPOS=$1 || REBUILDREPOS="${REBUILDREPOS} $1"
				shift 1
			done
		;;
	    -s|--sync-stable)
	    	STABLEREPO=1
			shift 1
			while [[ (( $# > 0 )) && ${1::1} != "-" ]]
			do
				[[ -z ${STABLEREPOS} ]] && STABLEREPOS=$1 || STABLEREPOS="${STABLEREPOS} $1"
				shift 1
			done
		;;
	    -f|--force)
			FORCE=1
			shift 1
	    ;;

		--version)
			versioninfo
			exit
		;;	
		*)
			helpscreen
			shift 1
			exit
		;;
	esac
done

# If we can't read the config file we should complain and quit
[[ ! -r ${CFGFILE} ]] && echo "ERROR: Unable to read config file at ${CFGFILE}" >&2 && exit 1 

# Include and initialise logging library
[[ ! -r ${OUTLOGLIB} ]] && echo "ERROR: Unable to load outlogger library from ${OUTLOGLIB}" >&2 && exit 1
[[ -z "${LOGPATH}" ]] && echo "ERROR: No LOGPATH set in ${CFGFILE}" >&2 && exit 1
source ${OUTLOGLIB}
init_logging ${LOGPATH}

# Check configuration
[[ -z ${REPOSROOT} ]] && echo "ERROR: No REPOSROOT set in ${CFGFILE}" >&2 && exit 1
if [[ -n ${LIVEREPO} ]]; then
	[[ -z ${GENTOORSYNC} ]] && echo "ERROR: No GENTOORSYNC set in ${CFGFILE}" >&2 && exit 1
	[[ -z ${GENTOORSOPT} ]] && echo "ERROR: No GENTOORSOPT set in ${CFGFILE}" >&2 && exit 1
fi
if [[ -n ${TESTREPO} || -n ${STABLEREPO} ]]; then
	[[ -z ${BUILDSPACESXX} && -z ${BUILDSPACES32} ]] \
		&& echo "ERROR: No BUILDSPACESXX or BUILDSPACES32 set in ${CFGFILE}" >&2 && exit 1
	[[ -z ${TESTREPORSOPT} ]] && echo "ERROR: No TESTREPORSOPT set in ${CFGFILE}" >&2 && exit 1
	[[ -z ${STABLEREPORSOPT} ]] && echo "ERROR: No STABLEREPORSOPT set in ${CFGFILE}" >&2 && exit 1
fi

# Check request
[[ ${AUTOREBUILD} == "yes" && -n ${TESTREPO} && -n ${REBUILDCACHE} ]] \
	&& echo "ERROR: AUTOREBUILD=\"yes\" set in ${CFGFILE} with --sync-test and --rebuild-caches makes no sense!" >&2 && exit 2

# If we are not being run from a TTY then set SENDMAIL and QUIET
tty -s
if (( $? )); then
	SENDEMAIL=1
	QUIET=1
fi  

# If we are running in quiet mode then redirect output to the log
# otherwise tee output to the log and stdout
if [[ -n ${QUIET} ]]; then
	redirect_output_to_file sync-repositories.out.log
else
	tee_output_to_file_stdout sync-repositories.out.log
fi

# If we have been asked to sync the "live" repository...
if [[ -n ${LIVEREPO} ]]; then
	echo -n "Synchronising the \"live\" portage tree..."
	exec_and_log live_portage_rsync "rsync ${GENTOORSYNC} ${REPOSROOT}/live/portage ${GENTOORSOPT}"
	okorfail 3
	if [[ ${AUTOLAYMANSYNC} == "yes" ]]; then
		echo -n "Synchronising the layman overlays..."
		exec_and_log live_layman_sync "layman --sync-all"
		okorfail 4
	fi
	[[ -z ${KEEPGOING} && (( ${EXITSTATUS} != 0 )) ]] && finish_up
fi

# If we have been asked to sync a testing repository...
if [[ -n ${TESTREPO} ]]; then
	[[ -n ${LIVEREPO} ]] && echo
	# If we have been asked to sync "all" repositories then assemble a list
	[[ ${TESTREPOS} = "all" ]] && TESTREPOS="${BUILDSPACESXX} ${BUILDSPACES32} ${NONBUILDREPOS}"

	# Loop through the repositories...
	for REPO in ${TESTREPOS}; do
		# Check that this appears to be a repository
		if [[ ! -d ${REPOSROOT}/testing/${REPO} ]]; then
			echo "ERROR: No repository at ${REPOSROOT}/testing/${REPO}" >&2 && exit 2
		fi
		[[ ! " ${BUILDSPACESXX} " =~ [[:blank:]]${REPO}[[:blank:]] && \
   	   	   ! " ${BUILDSPACES32} " =~ [[:blank:]]${REPO}[[:blank:]] && \
		   ! " ${NONBUILDREPOS} " =~ [[:blank:]]${REPO}[[:blank:]] ]] \
			&& echo "ERROR: ${REPO} does not appear in BUILDSPACESXX, BUILDSPACES32 or NONBUILDREPOS" >&2 && exit 2
			 
		# Clear the updated "flag"
		[[ -f ${REPOSROOT}/testing/${REPO}/updated ]] && rm ${REPOSROOT}/testing/${REPO}/updated
			 
 		# Synchronise the "live" portage tree to the testing repository 
		[[ -n ${DONEONE} ]] && echo 
		echo -n "Synchronising the \"live\" portage tree to the ${REPO} testing repository..."
		exec_and_log "testing_portage_rsync_${REPO}" "rsync ${REPOSROOT}/live/portage/ ${REPOSROOT}/testing/${REPO}/portage/ ${TESTREPORSOPT}"
		okorfail 6
		
		# If they exist then synchronise the "live" overlays to the "testing" repository
		if [[ -d ${REPOSROOT}/live/overlays ]]; then
			echo -n "Synchronising the \"live\" overlays to the ${REPO} testing repository..."
			mkdir -p ${REPOSROOT}/testing/${REPO}/overlays
			exec_and_log "testing_overlays_rsync_${REPO}" "rsync ${REPOSROOT}/live/overlays/ ${REPOSROOT}/testing/${REPO}/overlays/ ${TESTREPORSOPT}"
			okorfail 7
		fi
		# And finally rebuild-portage-caches if instructed to do so
		if [[ ${AUTOREBUILD} == "yes" ]]; then
			if [[ " ${BUILDSPACESXX} " =~ [[:blank:]]${REPO}[[:blank:]] ]]; then
				echo -n "Running rebuild-portage-caches in the ${REPO} build-space..."
				exec_and_log "rebuild-portage-caches_${REPO}" "chroot ${BUILDSPACEROOT}/${REPO} /usr/bin/rebuild-portage-caches"
				okorfail 10
			elif [[ " ${BUILDSPACES32} " =~ [[:blank:]]${REPO}[[:blank:]] ]]; then
				echo -n "Running linux32 rebuild-portage-caches in the ${REPO} build-space..."
				exec_and_log "rebuild-portage-caches_${REPO}" "linux32 chroot ${BUILDSPACEROOT}/${REPO} /usr/bin/rebuild-portage-caches"
				okorfail 10
			fi
		fi
		
		DONEONE=1
	done
	unset DONEONE
	[[ -z ${KEEPGOING} && (( ${EXITSTATUS} != 0 )) ]] && finish_up
fi

# If we have been asked to rebuild caches for a buildspace...
if [[ -n ${REBUILDCACHE} ]]; then
	[[ -n ${LIVEREPO} || -n ${TESTREPO} ]] && echo -e "\n"
	# If we have been asked to rebuild "all" buildspace caches then assemble a list
	[[ ${REBUILDREPOS} = "all" ]] && REBUILDREPOS="${BUILDSPACESXX} ${BUILDSPACES32}"

	# Loop through the repositories...
	for REPO in ${REBUILDREPOS}; do
		# Check that this appears to be a repository
		if [[ ! -d ${REPOSROOT}/testing/${REPO} ]]; then
			echo "ERROR: No repository at ${REPOSROOT}/testing/${REPO}" >&2 && exit 2
		fi
		[[ ! " ${BUILDSPACESXX} " =~ [[:blank:]]${REPO}[[:blank:]] && \
		   ! " ${BUILDSPACES32} " =~ [[:blank:]]${REPO}[[:blank:]] ]] \
			&& echo "ERROR: ${REPO} does not appear in BUILDSPACESXX or BUILDSPACES32" >&2 && exit 2
		# Run rebuild-portage-caches in the testing buildspace
		[[ -n ${DONEONE} ]] && echo -e "\n" 
		if [[ " ${BUILDSPACESXX} " =~ [[:blank:]]${REPO}[[:blank:]] ]]; then
			echo -e "\nRunning rebuild-portage-caches in the ${REPO} build-space..."
			exec_and_log "rebuild-portage-caches_${REPO}" "chroot ${BUILDSPACEROOT}/${REPO} /usr/bin/rebuild-portage-caches"
		else
			echo -e "\nRunning linux32 rebuild-portage-caches in the ${REPO} build-space..."
			exec_and_log "rebuild-portage-caches_${REPO}" "linux32 chroot ${BUILDSPACEROOT}/${REPO} /usr/bin/rebuild-portage-caches"
		fi
		okorfail 12
		DONEONE=1
	done
	unset DONEONE
	[[ -z ${KEEPGOING} && (( ${EXITSTATUS} != 0 )) ]] && finish_up
fi		

# If we have been asked to sync a stable repository...
if [[ -n ${STABLEREPO} ]]; then
	[[ -n ${LIVEREPO} || -n ${TESTREPO} || -n ${REBUILDCACHE} ]] && echo
	# If we have been asked to sync "all" repositories then assemble a list
	[[ ${STABLEREPOS} = "all" ]] && STABLEREPOS="${BUILDSPACESXX} ${BUILDSPACES32} ${NONBUILDREPOS}"

	# Loop through the repositories...
	for REPO in ${STABLEREPOS}; do
		# Check that this appears to be a repository
		if [[ ! -d ${REPOSROOT}/testing/${REPO} ]]; then
			echo "ERROR: No repository at ${REPOSROOT}/testing/${REPO}" >&2 && exit 2
		fi
		[[ ! " ${BUILDSPACESXX} " =~ [[:blank:]]${REPO}[[:blank:]] && \
   	   	   ! " ${BUILDSPACES32} " =~ [[:blank:]]${REPO}[[:blank:]] && \
		   ! " ${NONBUILDREPOS} " =~ [[:blank:]]${REPO}[[:blank:]] ]] \
			&& echo "ERROR: ${REPO} does not appear in BUILDSPACESXX, BUILDSPACES32 or NONBUILDREPOS" >&2 && exit 2

		# Check that the "updated flag" is NOT set, or the --force option specified
		[[ -n ${DONEONE} ]] && echo 
		if [[ ! -f ${REPOSROOT}/testing/${REPO}/updated && -z ${FORCE} ]]; then
			echo "The ${REPO} build-space has not been updated since the last --sync-test and --force not specified, skipping."
		else			 
	 		# Synchronise the "testing" configurations to the "stable" repository 
			echo -n "Synchronising the testing configurations to the ${REPO} stable repository..."
			exec_and_log "stable_configs_rsync_${REPO}" "rsync ${REPOSROOT}/testing/${REPO}/conf/ ${REPOSROOT}/stable/${REPO}/conf/ ${STABLEREPORSOPT}"
			okorfail 13
	 		# Synchronise the "testing" portage tree to the "stable" repository 
			echo -n "Synchronising the testing portage tree to the ${REPO} stable repository..."
			exec_and_log "stable_portage_rsync_${REPO}" "rsync ${REPOSROOT}/testing/${REPO}/portage/ ${REPOSROOT}/stable/${REPO}/portage/ ${STABLEREPORSOPT}"
			okorfail 14
			# If they exist synchronise the "testing" overlays to the "stable" repository
			if [[ -d ${REPOSROOT}/testing/${REPO}/overlays ]]; then
				echo -n "Synchronising the testing overlays to the ${REPO} stable repository..."
				mkdir -p ${REPOSROOT}/stable/${REPO}/overlays
				exec_and_log "stable_overlays_rsync_${REPO}" "rsync ${REPOSROOT}/testing/${REPO}/overlays/ ${REPOSROOT}/stable/${REPO}/overlays/ ${STABLEREPORSOPT}"
				okorfail 15
			fi
			# Then synchronise packages and kernels
			echo -n "Synchronising the testing packages to the ${REPO} stable repository..."
			exec_and_log "stable_packages_rsync_${REPO}" "rsync ${REPOSROOT}/testing/${REPO}/packages/ ${REPOSROOT}/stable/${REPO}/packages/ ${STABLEREPORSOPT}"
			okorfail 17
			echo -n "Synchronising the testing kernels to the ${REPO} stable repository..."
			exec_and_log "stable_kernels_rsync_${REPO}" "rsync ${REPOSROOT}/testing/${REPO}/kernels/ ${REPOSROOT}/stable/${REPO}/kernels/ ${STABLEREPORSOPT}"
			okorfail 18
		fi
		
		DONEONE=1
	done
	unset DONEONE
fi

finish_up
