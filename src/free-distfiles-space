#! /bin/bash

function helpscreen
{
	echo "Usage: free-distfiles-space [OPTION]..."
#	echo ""
	echo
	echo "  -d, --free-delete              repeatedly delete the oldest files from DISTDIR"
	echo "                                 until there is sufficient space to download"
	echo "                                 those required for an update (implies -r)"
	echo "  -f, --display-free             display the current free space on the device"
	echo "                                 used to store DISTDIR"
	echo "  -r, --display-required         display the amount of free space requuired on"
	echo "                                 the device used to store DISTDIR to download"
	echo "                                 those files required for an update"
}

# Process command line switches
while [ $# -gt 0 ]
do
	case $1 in
		-d|--free-delete)
			GETREQUIRED=1
			FREEDELETE=1
			shift 1
	    ;;
	    -f|--display-free)
			DISPLAYFREE=1
			shift 1
	    ;;
		-r|--display-required)
			GETREQUIRED=1
			DISPLAYREQUIRED=1
			shift 1
		;;
				
		*)
			helpscreen
			shift 1
			exit
		;;
	esac
done

# Source the profile (we're probably being run in a chroot and this may not have been done)
source /etc/profile &>/dev/null

# Check to make sure we are being run from inside the buildspace.
if [ -z "$BUILDSPACE_NAME" ]; then
	echo "ERROR: $0 should only be run from inside a buildspace!" >&2
	exit 2
fi

# Get the location of the DISTDIR
DISTDIR=$(portageq distdir)

# If we have been asked to display current free space then...
if [[ -n ${DISPLAYFREE} ]]; then
	FREEBYTES=$(df -P -B 1 ${DISTDIR} 2>/dev/null | tail -1 | awk '{print $4}')
	[[ $? ]] || ( echo "Unable to calculate free disk space in DISTDIR (${DISTDIR})" && exit 1 )
	FREESPACE=$(( ${FREEBYTES} / 1024 )) UNITS="KB"
	(( ${FREESPACE} > 1024 )) && FREESPACE=$(( ${FREESPACE} / 1024 )) UNITS="MB"
	(( ${FREESPACE} > 1024 )) && FREESPACE=$(( ${FREESPACE} / 1024 )) UNITS="GB"
	echo "Free space available in DISTDIR (${DISTDIR}) : ${FREESPACE} ${UNITS} (${FREEBYTES} bytes)"
fi


# If we have been asked to display required free space then...
if [[ -n ${GETREQUIRED} || -n ${DISPLAYREQUIRED} ]]; then
	# Get size of downloads for this update
	# Eg: SIZESTR="Total: 3 packages (3 upgrades), Size of downloads: 1,497 kB"
	SIZESTR=$(emerge -pvuDN world | grep "Size of downloads:")
	
	# SPLIT result string
	oIFS=$IFS
	IFS=':' SPLIT1=(${SIZESTR})
	IFS=' ' SPLIT2=(${SPLIT1[2]})
	IFS=$oIFS
	
	# Get size and units
	REQSIZE=${SPLIT2[0]//,/}
	units=${SPLIT2[1]}
	
	# Add 10%
	REQSIZE=$(( ${REQSIZE} + ${REQSIZE} / 10 ))

	[[ -n ${DISPLAYREQUIRED} ]] && echo -n "Free space required in DISTDIR (${DISTDIR}) : ${REQSIZE} ${units}"
	
	# Calculate in bytes
	shopt -s nocasematch
	case "$units" in
		"kb") REQSIZE=$(( ${REQSIZE} * 1024 )) ;;
		"mb") REQSIZE=$(( ${REQSIZE} * 1024 * 1024 )) ;;
		"gb") REQSIZE=$(( ${REQSIZE} * 1024 * 1024 * 1024 )) ;;
	esac
	shopt -u nocasematch
	
	# Display result
	[[ -n ${DISPLAYREQUIRED} ]] && echo " (${REQSIZE}) bytes)"
fi


# If we have been asked to free the required space then...
if [[ -n ${FREEDELETE} ]]; then
	# Store current directory, repeatedly delete oldest 10 files from distfiles
	# directory until there is sufficient free space, restore current directory.
	pushd ${DISTDIR} > /dev/null 

	# We may be done already, if so quit	
	(( $(df . -P -B 1 2>/dev/null | tail -1 | awk '{print $4}') -ge ${REQSIZE} )) && exit
	
	echo -n "Freeing space for distfiles..."
	while (( $(df . -P -B 1 2>/dev/null | tail -1 | awk '{print $4}') -lt ${REQSIZE} ))
	do 
	  	rm `ls -1 --time=atime --sort=time --reverse | head --lines=20` 
	  	echo -n "."
	done 
	popd > /dev/null
	echo "done."
fi